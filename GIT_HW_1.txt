Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON.
	Repositories --> New --> "Repository name": "JSON" --> Click "Add a README file" --> Click "Create repository"

 5. Клонировать репозиторий JSON на локальный компьютер.
	git clone https://github.com/RoninInFire/JSON.git

 6. Внутри локального JSON создать файл “new.json”.
	cd JSON
	touch new.json

 7. Добавить файл под гит.
	git add new.json

 8. Закоммитить файл.
	git commit -m "new_json_file"

 9. Отправить файл на внешний GitHub репозиторий.
	git push

 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
	vim new.json

 11. Отправить изменения на внешний репозиторий.
	git commit -am "modified_json_file"
	git push

 12. Создать файл preferences.json
	touch preferences.json

 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
	vim preferences.json

 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
	touch skills.json
	vim skills.json

 15. Отправить сразу 2 файла на внешний репозиторий.
	git add preferences.json
	git commit -m "preferences"
	git add skills.json
	git commit -m "skills"
	git push

 16. На веб интерфейсе создать файл bug_report.json.

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
	
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	
 20. Синхронизировать внешний и локальный репозиторий JSON
	git pull


XML
 1. Создать внешний репозиторий c названием XML.
	Repositories --> New --> "Repository name": "XML" --> Click "Add a README file" --> Click "Create repository"

 2. Клонировать репозиторий XML на локальный компьютер.
	git clone https://github.com/RoninInFire/XML.git

 3. Внутри локального XML создать файл “new.xml”.
	cd XML
	touch new.xml

 4. Добавить файл под гит.
	git add new.xml

 5. Закоммитить файл.
	git commit -m "new.xml"

 6. Отправить файл на внешний GitHub репозиторий.
	git push

 7. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
	vim new.xml

 8. Отправить изменения на внешний репозиторий.
	git commit -am "modified xml file"
	git push

 9. Создать файл preferences.xml
	touch preferences.xml

 10. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
	vim preferences.xml

 11. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
	vim skills.xml

 12. Сделать коммит в одну строку.
	git add .
	git commit -v preferences.xml skills.xml

 13. Отправить сразу 2 файла на внешний репозиторий.
	git push

 14. На веб интерфейсе создать файл bug_report.xml.
	
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	
 16. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
	
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	
 18. Синхронизировать внешний и локальный репозиторий XML
	git pull


TXT
 1. Создать внешний репозиторий c названием TXT.
	Repositories --> New --> "Repository name": "TXT" --> Click "Add a README file" --> Click "Create repository"

 2. Клонировать репозиторий TXT на локальный компьютер.
	git clone https://github.com/RoninInFire/TXT.git

 3. Внутри локального TXT создать файл “new.txt”.
	cd TXT
	touch new.txt

 4. Добавить файл под гит.
	git add new.txt

 5. Закоммитить файл.
	git commit -m "new txt"

 6. Отправить файл на внешний GitHub репозиторий.
	git push

 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
	vim new.txt

 8. Отправить изменения на внешний репозиторий.
	git commit -am "modified txt file"

 9. Создать файл preferences.txt
	touch preferences.txt

 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
	vim preferences.txt

 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
	vim skills.txt

 12. Сделать коммит в одну строку.
	git add .
	git commit -v preferences.txt skills.txt

 13. Отправить сразу 2 файла на внешний репозиторий.
	git push

 14. На веб интерфейсе создать файл bug_report.txt.
	
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
	
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	
 18. Синхронизировать внешний и локальный репозиторий TXT
	git pull